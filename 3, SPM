SPM packages are simple source code directories containing a "spmbuild.sh" file
the script puts all output files in .cache/spm under the source code directory

to install a package:
; spm install <package-name> [<gnunet/git-url> [<public-key>]]

this is what "spm" program does:
, it downloads the source directory from the given url to "../state/spm/packages/<url-hash|package-name>"
	(this path is relative to the path of the directory containing "spm" program)
, it runs the included "spmbuild.sh" in a jail that its write access is restricted to:
	"../state/spm/packages/<package-name>/.cache/spm/"
, if there is a file named "0" in "../state/spm/packages/<package-name>/.cache/spm/"
	, it creates hardlinks from "../state/spm/packages/<package-name>/.cache/spm/" to "../apps/<package-name>/"
	, it creates a symbolic link from "../apps/<package-name>/0" to "./<package-name>"
	, it creates a symbolic link from "../apps/<package-name>/0.desktop" to "../share/applications"
	, it adds the given name, url, and public key, to "../state/spm/apps", so it can later do updates

when no URL is given, it means to install a package already present in "../state/spm/packages/<package-name>",
	as is the case for built'in packages

SPM packages do not need dependency tracking
because all the dependencies will be hard'linked to the same directory alongside the executable
