SPM packages are simple source code directories containing a "spmbuild.sh" file
"spmbuild.sh" is a shell script file with special comment lines:
	#dep <gnu-url|package-name>
if "spm" is run as root, "spmbuild.sh" files will be run in a namespace, using "unshare"
	"https://en.wikipedia.org/wiki/Linux_namespaces"
	"https://git.busybox.net/busybox/tree/util-linux/unshare.c"
	"https://manpages.debian.org/bookworm/util-linux/unshare.1.en.html"
	"https://github.com/containers/bubblewrap"

the "spmbuild.sh" file can be in a gnunet URL
the source can be in the same place, or in a Git URL (in which case it will git'cloned in the spmbuild file)
when a package is published:
, the source is published to gnunet://<domain-name>/packages/src/<package-name>/
, the files ".cache/spm/<arch>/" (not recursively) will be put into:
	gnunet://<domain-name>/packages/<arch>/<package-name>/

when downloading a dep, if the a built one for the arch exist,
	just download that (and put it in .cache/spm/<arch>/) plus the spmbuild.sh file,
	otherwise download the whole source

"spm" program puts all output files in ".cache/spm" under the source code directory
SPM packages do not need dependency tracking
because all the dependencies will be hard'linked to the application's directory

to build a package (including deps):
this downloads the source code from the given URL into "$spm_dir/packages/<url-hash>",
	then builds the package using "$spm_dir/packages/<url-hash>/spmbuild"
	("$spm_dir" is "/spm" when "spm" is run as root, and "~/.local/spm" otherwise)
when instead of a URL, a package name is given,
	it just builds a package that already exists in "$spm_dir/packages/<package-name>"
	this happens for builtin or customized packages

to install a package:
; spm install <package-name> [<url>]
this command:
, builds the package (as explained above)
, creates hard links from files in "$spm_dir/packages/<url-hash|package-name>/.cache/spm/<arch>" directory,
	into "$spm_dir/installed/<package-name>" directory (recursively)
, if a URL is given, put it in "$spm_dir/installed/<package-name>/data/url" file
	later this will be used to update the app
, creates symlinks from files mentioned in "$spm_dir/installed/<package-name>/data/apps" file,
	into "$apps_dir" directory
	("$apps_dir" is "/apps" when "spm" is run as root, and "~/.local/bin" otherwise)
, creates symlinks from "$spm_dir/installed/<package-name>/data/*.desktop" files into "$gui_apps_dir"
	("$gui_apps_dir" is "/apps/gui" when "spm" is run as root, and "~/.local/share/applications" otherwise)

public keys for a package downloaded from a URL can be stored in "$spm_dir/keys/<url-hash>"
spm uses these keys to check the signature of packages when downloading/updating them

if you want to customize the configurations of an SPM package:
, create "$spm_dir/packages/<package-name>/spmbuild.sh" containing:
	, build command for the package we want to customize: spm build <url>
	, commands to hard link the required files
	, commands to apply the custom configurations
, run "spm install <package-name>"
this way to customize packages, without the need for "/etc"

to remove an installed app:
; spm remove <package-name>
this command:
, removes the files mentioned in "$spm_dir/installed/<package-name>/data/apps" from "/apps"
, removes files in "/apps/gui/" corresponding to "$spm_dir/installed/<package-name>/data/*.desktop"
, removes "$spm_dir/installed/<package-name>" directory
